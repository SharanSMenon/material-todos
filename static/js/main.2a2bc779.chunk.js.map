{"version":3,"sources":["dialog.js","App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","Grow","AlertDialogSlide","useState","open","setOpen","handleClose","Button","variant","color","onClick","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","dividers","DialogContentText","DialogActions","App","list","JSON","parse","localStorage","getItem","setItem","stringify","state","items","title","handleChange","bind","handleCreate","handleCheck","handleDelete","target","name","value","this","setState","e","preventDefault","prevState","Items","Date","now","checked","item","find","ex","filter","classes","Paper","className","root","Typography","align","gutterBottom","onSubmit","form","TextField","label","onChange","margin","autoComplete","type","List","map","ListItem","key","Checkbox","edge","tabIndex","ListItemText","primary","ListItemSecondaryAction","IconButton","Delete","Component","withStyles","marginTop","padding","maxWidth","marginBottom","display","flexDirection","alignItems","justifyContent","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a2bc779.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grow from '@material-ui/core/Grow';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Grow ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide() {\n    const [open, setOpen] = React.useState(false);\n\n    function handleClickOpen() {\n        setOpen(true);\n    }\n\n    function handleClose() {\n        setOpen(false);\n    }\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                Learn More\n            </Button>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"A Simple Todo App\"}</DialogTitle>\n                <DialogContent dividers>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        This app was created by Sharan Sajiv Menon to test Material UI Out.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import React from 'react';\nimport { Paper, Typography, TextField, Button, Checkbox, Divider } from '@material-ui/core';\nimport { List, ListItem, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from \"./dialog\"\nimport './App.css';\nconst styles = {\n  root: {\n    margin: \"0 auto\",\n    marginTop: 100,\n    padding: 20,\n    maxWidth: 400,\n    marginBottom: 50\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: 'row',\n    alignItems: \"baseline\",\n    justifyContent: 'space-evenly'\n  },\n  list: {\n    border: \"1px solid gray\"\n  }\n}\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    let list = JSON.parse(localStorage.getItem(\"list\"))\n    if (!list) {\n      localStorage.setItem(\"list\", JSON.stringify([]))\n    }\n    this.state = {\n      items: list ? list : [],\n      title: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value\n    })\n  }\n  handleCreate(e) {\n    e.preventDefault();\n    if (this.state.title) {\n      this.setState((prevState) => {\n        let Items = {\n          title: prevState.title,\n          id: Date.now(),\n          checked: false\n        }\n        let items = [...prevState.items, Items];\n        localStorage.setItem(\"list\", JSON.stringify(items))\n        return {\n          items,\n          title: \"\"\n        }\n      })\n    }\n  }\n  handleCheck(id) {\n    this.setState(({ items }) => {\n      let item = items.find(ex => ex.id === id)\n      item.checked = !item.checked\n      localStorage.setItem(\"list\", JSON.stringify(items))\n      return { items: items }\n    })\n  }\n  handleDelete(id) {\n    this.setState(({ items }) => {\n      let item = items.filter(ex => ex.id !== id)\n      localStorage.setItem(\"list\", JSON.stringify(item))\n      return { items: item }\n    })\n  }\n  render() {\n    const { classes } = this.props\n    return (\n      <Paper className={classes.root}>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n          Items\n        </Typography>\n        <form onSubmit={this.handleCreate} className={classes.form}>\n          <TextField\n            name='title'\n            label='Item'\n            value={this.state.title}\n            onChange={this.handleChange}\n            margin='normal'\n            autoComplete=\"off\"\n          />\n          <Button type='submit' color='primary' variant=\"contained\">\n            Create Item\n          </Button>\n        </form>\n        <List>\n          {this.state.items.map(({ id, title, checked }) => (\n            <ListItem key={id}>\n              <Checkbox\n                edge=\"start\"\n                checked={checked}\n                onClick={() => this.handleCheck(id)}\n                tabIndex={-1}\n              />\n              <ListItemText primary={title} />\n              <ListItemSecondaryAction>\n                <IconButton color='primary' onClick={() => this.handleDelete(id)}>\n                  <Delete />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          )\n          )}\n        </List>\n        {/* <Divider /> */}\n        <Dialog />\n      </Paper>\n    )\n  }\n}\nexport default withStyles(styles)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}